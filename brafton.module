<?php
/**
*	Call to the Adfero APIs.
*/

require_once dirname(__FILE__) . '/SampleAPIClientLibrary/ApiHandler.php';
require_once dirname(__FILE__) . '/RCClientLibrary/AdferoArticlesVideoExtensions/AdferoVideoClient.php';
require_once dirname(__FILE__) . '/RCClientLibrary/AdferoArticles/AdferoClient.php';
require_once dirname(__FILE__) . '/RCClientLibrary/AdferoPhotos/AdferoPhotoClient.php';

/**
*	Implementation of hook_menu() to create the blog pages and the admin settings page.
*/

function brafton_menu()	{

	$items = array();
	if( variable_get( 'brafton_blog_page' ) == 1 )	{
		$items['news'] = array(
			'title' => t( 'Latest News' ),
			'page callback' => 'brafton_blog_landing',
			'page arguments' => array( 'b_news' ),
			'access arguments' => array( 'view brafton blog' ),
			'type' => MENU_CALLBACK,
		);
	}
	if( variable_get( 'brafton_video_page' ) == 1 )	{
		$items['video'] = array(
			'title' => t( 'Video News' ),
			'page callback' => 'brafton_blog_landing',
			'page arguments' => array( 'b_video' ),
			'access arguments' => array( 'view brafton blog' ),
			'type' => MENU_CALLBACK,
		);
	}
	if( variable_get( 'brafton_blog_archives' ) == 1 )	{
		$items['news/archive'] = array(
			//'title' => t( 'News Archives' ),
			//'title callback' => 'brafton_archives_title', */ I could not get this to work for some reason.  It always shows December 1999.  I opted to programatically add the title through the brafton_archives_load function */
			'page callback' => 'brafton_archives_load',
			'page arguments' => array( 'b_news' ),
			'title arguments' => array( 'b_news',2,3 ),
			'access arguments' => array( 'view brafton blog' ),
			'type' => MENU_CALLBACK,
		);
	}
	if( variable_get( 'brafton_video_archives' ) == 1 )	{
		$items['video/archive'] = array(
			//'title' => t( 'News Archives' ),
			//'title callback' => 'brafton_archives_title', */ I could not get this to work for some reason.  It always shows December 1999.  I opted to programatically add the title through the brafton_archives_load function */
			'page callback' => 'brafton_archives_load',
			'page arguments' => array( 'b_video' ),
			'title arguments' => array( 2,3 ),
			'access arguments' => array( 'view brafton blog' ),
			'type' => MENU_CALLBACK,
		);
	}
	$items['admin/config/content/brafton-settings'] = array(
		'title' => t( 'All in One Brafton Content Integrator' ),
		'description' => t( 'The settings for the All in One Brafton Content Integrator.' ),
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'brafton_admin_form' ),
		'access arguments' => array( 'administer comments' ),
	);
	return $items;

}

/**
*	Implementation of hook_block_info() to register the blog blocks.
*/

function brafton_block_info()	{

	$blocks = array();
		if( variable_get( 'brafton_blog_headlines' ) == 1 )	{
			$blocks['headlines'] = array(
				'info' => t( 'Brafton Blog Headlines' ),
				'cache' => DRUPAL_NO_CACHE,
			);
		}
		if( variable_get( 'brafton_video_headlines' ) == 1 )	{
			$blocks['headlines'] = array(
				'info' => t( 'Brafton Video Headlines' ),
				'cache' => DRUPAL_NO_CACHE,
			);
		}
		if( variable_get( 'brafton_blog_categories' ) == 1 )	{
			$blocks['categories'] = array(
				'info' => t( 'Brafton Blog Categories' ),
				'cache' => DRUPAL_NO_CACHE,
			);
		}
		if( variable_get( 'brafton_video_categories' ) == 1 )	{
			$blocks['video_categories'] = array(
				'info' => t( 'Brafton Video Categories' ),
				'cache' => DRUPAL_NO_CACHE,
			);
		}
		if( variable_get( 'brafton_blog_archives' ) == 1 )	{
			$blocks['archives'] = array(
				'info' => t( 'Brafton Blog Archives' ),
				'cache' => DRUPAL_NO_CACHE,
			);
		}
		if( variable_get( 'brafton_video_archives' ) == 1 )	{
			$blocks['video_archives'] = array(
				'info' => t( 'Brafton Video Archives' ),
				'cache' => DRUPAL_NO_CACHE,
			);
		}
	return $blocks;

}

/**
*	Implementation of hook_block_view() to render the blog blocks.
*/

function brafton_block_view( $delta = '' )	{

	$block = array();
	switch( $delta )	{
		case 'headlines':
			$block['subject'] = '<h3>' . l( t( 'Latest News' ),'news' ) . '</h3>';
			$block['content'] = brafton_headlines( 'b_news' );
			break;
		case 'video_headlines':
			$block['subject'] = '<h3>' . l( t( 'Latest Video News' ),'video' ) . '</h3>';
			$block['content'] = brafton_headlines( 'b_video' );
			break;
		case 'categories':
			$block['subject'] = '<h3>Categories</h3>';
			$block['content'] = brafton_categories( 'b_news' );
			break;
		case 'video_categories':
			$block['subject'] = '<h3>Video Categories</h3>';
			$block['content'] = brafton_categories( 'b_video' );
			break;
		case 'archives':
			$block['subject'] = '<h3>Archives</h3>';
			$block['content'] = brafton_archives( 'b_news' );
			break;
		case 'video_archives':
			$block['subject'] = '<h3>Video Archives</h3>';
			$block['content'] = brafton_archives( 'b_video' );
			break;
	}
	return $block;

}

/**
*	Implementation of hook_node_info() to create the News and Video Article content creation forms.
*/

function brafton_node_info() {

  $brafton_nodes =  array(
        'b_news' => array(
			'name' => t( 'News Article' ),
			'base' => 'node_content',
			'description' => t( 'Use <em>news articles</em> for your Brafton, ContentLEAD, or Castleford blog.' ),
        ),
        'b_video' => array(
			'name' => t( 'Video Article' ),
			'base' => 'node_content',
			'description' => t( 'Use <em>Video articles</em> for your Brafton, ContentLEAD, or Castleford video blog.' ),
        ),
    );
  return $brafton_nodes;

}

/**
*	Implementation of hook_node_view_alter to add related posts to the News Article node view.
*/

function brafton_node_view_alter( &$build )	{

	if( variable_get( 'brafton_related_articles' ) == 1 )	{
		if( $build['#bundle'] == 'b_news' && $build['#view_mode'] == 'full' ){
			$build['#post_render'] = array( 'brafton_related_posts' );
		}
	}
	if( variable_get( 'brafton_related_videos' ) == 1 )	{
		if( $build['#bundle'] == 'b_video' && $build['#view_mode'] == 'full' ){
			$build['#post_render'] = array( 'brafton_related_posts' );
		}
	}

}

/**
*	Implementation of hook_permission to create toggleable access permissions for the blog page.
*/

function brafton_permission()	{

	$permissions = array(
		'view brafton blog' => array(
			'title' => t( 'View the Brafton blog' ),
			'description' => t( 'Allow/Disallow the user to view the Brafton blog.' ),
		),
	);
	return $permissions;

}

/**
*	Creation of the admin form.
*/

function brafton_admin_form()	{

	$form = array();

	//Gets the users as an array for the author dropdown
	
	$results = db_query( "SELECT uid, name FROM {users} WHERE status=1" );
	$user_array = $results->fetchAllKeyed();

	//Renders the admin form using the Drupal forms API.
	$form['brafton_feed_type'] = array(
		'#type' => 'select',
		'#title' => t( 'Type of Content' ),
		'#description' => t( 'The type(s) of content you are integrating.' ),
		'#options' => array(
			'articles' => 'Articles',
			'videos' => 'Videos',
			'both' => 'Both',
		),
		'#default_value' => variable_get( 'brafton_feed_type','articles' ),
		'#prefix' => '<h2>Choose Content Types</h2>',
	);
	$form['brafton_api_root'] = array(
		'#type' => 'select',
		'#title' => t( 'API Root' ),
		'#description' => t( 'The root domain of your Api key (i.e, api.brafton.com).' ),
		'#options' => array(
			'http://api.brafton.com' => 'Brafton',
			'http://api.contentlead.com' => 'ContentLEAD',
			'http://api.castleford.com.au' => 'Castleford',
		),
		'#default_value' => variable_get( 'brafton_api_root','http://api.brafton.com' ),
		'#prefix' => '<h2>For Articles</h2>',
	);
	$form['brafton_api_key'] = array(
		'#type' => 'textfield',
		'#title' => t( 'Api Key' ),
		'#description' => t( 'Your API key (of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).' ),
		'#default_value' => variable_get( 'brafton_api_key' ),
		'#size' => 36,
		'#maxlength' => 36,
	);
	$form['brafton_archive_file'] = array(
		'#type' => 'managed_file',
		'#title' => t( 'Article Archive File' ),
		'#description' => t( 'Your article archive file.' ),
		'#default_value' => variable_get( 'brafton_archive_file' ),
		'#upload_validators' => array(
			'file_validate_extensions' => array(0 => 'xml'),
		),
	);
	$form['brafton_video_public_key'] = array(
		'#type' => 'textfield',
		'#title' => t( 'Video Public Key' ),
		'#description' => t( 'Your video Public Key.' ),
		'#default_value' => variable_get( 'brafton_video_public_key' ),
		'#size' => 8,
		'#maxlength' => 8,
		'#prefix' => '<h2>For Videos</h2>',
	);
	$form['brafton_video_secret_key'] = array(
		'#type' => 'textfield',
		'#title' => t( 'Video Secret Key' ),
		'#description' => t( 'Your video Secret Key.' ),
		'#default_value' => variable_get( 'brafton_video_secret_key' ),
		'#size' => 36,
		'#maxlength' => 36,
	);
	$form['brafton_video_feednum'] = array(
		'#type' => 'textfield',
		'#title' => t( 'Video Feed Number' ),
		'#description' => t( 'Your video feed number.' ),
		'#default_value' => variable_get( 'brafton_video_feednum',0 ),
		'#size' => 10,
		'#maxlength' => 10,
	);
	$form['brafton_author'] = array(
		'#type' => 'select',
		'#title' => t( 'Content Author' ),
		'#description' => t( 'The author of the content.' ),
		'#options' => $user_array,
		'#default_value' => variable_get( 'brafton_author',1 ),
		'#prefix' => '<h2>Import Options</h2>',
	);
	$form['brafton_import_date'] = array(
		'#type' => 'select',
		'#title' => t( 'Import Date' ),
		'#description' => t( 'The date that the content is marked as having been published.' ),
		'#options' => array(
			'published' => 'Published Date',
			'created' => 'Created Date',
			'lastmodified' => 'Last Modified Date',
		),
		'#default_value' => variable_get( 'brafton_import_date','published' ),
	);
	$form['brafton_comments'] = array(
		'#type' => 'select',
		'#title' => t( 'Enable Comments?' ),
		'#description' => t( 'Enable, Hide, or Disable Comments' ),
		'#options' => array(
			0 => 'Disabled',
			1 => 'Hidden',
			2 => 'Enabled',
		),
		'#default_value' => variable_get( 'brafton_comments',0 ),
	);
	$form['brafton_overwrite'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Overwrite any changes made to existing content.' ),
		'#default_value' => variable_get( 'brafton_overwrite',0 ),
	);
	$form['brafton_published'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Import articles as unpublished.' ),
		'#default_value' => variable_get( 'brafton_published',0 ),
	
	);
	$form['brafton_blog_page'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Create a News Page at "mydomain.com/news".' ),
		'#default_value' => variable_get( 'brafton_blog_page',0 ),
		'#prefix' => '<h2>Integration Options for Articles</h2>',
	);
	$form['brafton_blog_archives'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Create archives pages at "mydomain.com/news/archive/year/month" and an archives block.' ),
		'#default_value' => variable_get( 'brafton_blog_archives',0 ),
	);
	$form['brafton_blog_categories'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Create a categories block.' ),
		'#default_value' => variable_get( 'brafton_blog_categories',0 ),
	);
	$form['brafton_blog_headlines'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Create a headlines block.' ),
		'#default_value' => variable_get( 'brafton_blog_headlines',0 ),
	);
	$form['brafton_related_articles'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Add related articles to Brafton posts.' ),
		'#default_value' => variable_get( 'brafton_related_articles',0 ),
	);
	$form['brafton_video_page'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Create a Video Page at "mydomain.com/video".' ),
		'#default_value' => variable_get( 'brafton_video_page',0 ),
		'#prefix' => '<h2>Integration Options for Videos</h2>',
	);
	$form['brafton_video_archives'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Create video archives pages at "mydomain.com/video/archive/year/month" and a video archives block.' ),
		'#default_value' => variable_get( 'brafton_video_archives',0 ),
	);
	$form['brafton_video_categories'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Create a video categories block.' ),
		'#default_value' => variable_get( 'brafton_video_categories',0 ),
	);
	$form['brafton_video_headlines'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Create a video headlines block.' ),
		'#default_value' => variable_get( 'brafton_video_headlines',0 ),
	);
	$form['brafton_related_videos'] = array(
		'#type' => 'checkbox',
		'#title' => t( 'Add related videos to Brafton videos.' ),
		'#default_value' => variable_get( 'brafton_related_videos',0 ),
	);
	return system_settings_form($form);

}

/**
*	Rendering of the blog page.
*/

function brafton_blog_landing( $bundle )	{

	$query = new EntityFieldQuery();
	$query->entityCondition( 'entity_type','node' );
	$query->entityCondition( 'bundle',$bundle );
	$query->propertyCondition( 'status', 1 );
	$query->propertyOrderBy( 'created', 'DESC' );
	$query->pager();
	$result = $query->execute();
	$content = '';
	if ( !empty( $result ) )	{
		foreach ( $result['node'] as $key => $value )	{
			$node = node_view( node_load( $key ),'teaser' );
			$content .= drupal_render( $node );
		}
	}
	return $content . theme( 'pager' );

}

//Rendering of the Archives Pages

function brafton_archives_load( $bundle,$year,$month )	{

	//Formats url arguments into a unix date range

	$unix_start = strtotime( $year . '-' . $month );
	if( $month == 12 ){
		$unix_end = strtotime( ( $year + 1 ) . '-1' );
	}
	else {
		$unix_end = strtotime( $year . '-' . ( $month + 1 ) );
	}
	$query = new EntityFieldQuery();
	$query->entityCondition( 'entity_type','node' );
	$query->entityCondition( 'bundle',$bundle );
	$query->propertyCondition( 'status', 1 );
	$query->propertyCondition( 'created',array($unix_start,$unix_end),'BETWEEN' );
	$query->propertyOrderBy( 'created', 'DESC' );
	$query->pager();
	$result = $query->execute();
	$content = '<h1 class="title" id="page-title">' . brafton_archives_title( $year,$month ) . '</h4>';
	if ( !empty( $result ) )	{
		foreach ( $result['node'] as $key => $value )	{
			$node = node_view( node_load( $key ),'teaser' );
			$content .= drupal_render( $node );
		}
	}
	return $content . theme( 'pager' );

}

function brafton_archives_title( $year,$month )	{

	$unix_time =  mktime( 0,0,0,intval( $month ),10,intval( $year ) );
	$archive_date = format_date( $unix_time,'custom','F Y' );
	$title = t( 'News Archives - ' . $archive_date );
	return $title;

}

//Renders the Headlines Block

function brafton_headlines( $bundle )	{

	$query = new EntityFieldQuery();
	$query->entityCondition( 'entity_type','node' );
	$query->entityCondition( 'bundle',$bundle );
	$query->propertyCondition( 'status', 1 );
	$query->propertyOrderBy( 'created', 'DESC' );
	$query->range(0,3);
	$result = $query->execute();
	$content = '<ul>';
	if ( !empty( $result ) )	{
		foreach ( $result['node'] as $key => $value )	{
			$node = node_load( $key );
			$content .= '<li>' . l( t( $node->title ),'node/' . $node->nid ) . '<br /><span class="headlines-date">' . format_date( $node->created,'custom','F j, Y' ) . '</span></li>';
		}
	}
	$content .= '</ul>';
	return $content;

}

//Renders the Categories Block

function brafton_categories( $bundle )	{

	//Loads the Brafton Vocabulary Object
	if ( $bundle == 'b_news' ) {
		$brafton_vocabulary = taxonomy_vocabulary_machine_name_load( 'b_news_t' );
	}
	else {
		$brafton_vocabulary = taxonomy_vocabulary_machine_name_load( 'b_news_v' );
	}
	$vid = $brafton_vocabulary->vid;

	$query = new EntityFieldQuery();
	$query->entityCondition( 'entity_type','taxonomy_term' );
	$query->propertyCondition( 'vid',$vid );
	$result = $query->execute();
	$content = '<ul>';
	if ( !empty( $result ) )	{
		foreach ( $result['taxonomy_term'] as $key => $value )	{
			$term = taxonomy_term_load( $key );
			$content .= '<li>' . l( t( $term->name ),'taxonomy/term/' . $term->tid ) . '</li>';
		}
	}
	$content .= '</ul>';
	return $content;

}

//Renders the Archives Block.

function brafton_archives( $bundle )	{

	$query = new EntityFieldQuery();
	$query->entityCondition( 'entity_type','node' );
	$query->entityCondition( 'bundle',$bundle );
	$query->propertyCondition( 'status', 1 );
	$query->propertyOrderBy( 'created', 'DESC' );
	$result = $query->execute();
	$date_array = array();
	$content = '<ul>';
	if ( !empty( $result ) )	{
		foreach ( $result['node'] as $key => $value )	{
			$node = node_load( $key );
			$year_month = format_date( $node->created,'custom','Y' ) . format_date( $node->created,'custom','m' );
     		array_push( $date_array,$year_month );
		}
		$date_array = array_unique( $date_array );
		foreach( $date_array as $value ){
			$year = str_split( $value,4 );
			$unix_time =  mktime( 0,0,0,$year[1],10,$year[0] );
			$date_string = format_date( $unix_time,'custom','F Y' );
			if( $bundle == 'b_news' )	{
			$content .= '<li>' . l( t( $date_string ),'news/archive/' . $year[0] . '/' . $year[1] ) . '</li>';
			}
			else {
			$content .= '<li>' . l( t( $date_string ),'video/archive/' . $year[0] . '/' . $year[1] ) . '</li>';
			}
		}
	}
	$content .= '</ul>';
	return $content;

}

//Renders the Related Posts Widget

function brafton_related_posts( &$output,$pre_render )	{

	$node = $pre_render['#node'];
	$language = $node->language;
	$bundle = $node->type;
	if( $bundle == 'b_news' ){
		$content = '<h3>Related Articles</h3><ul>';
		@$term_array = $node->field_brafton_term[ $language ];
		$field_condition = 'field_brafton_term';
	}
	else{
		$content = '<h3>Related Video</h3><ul>';
		@$term_array = $node->field_brafton_video_term[ $language ];
		$field_condition = 'field_brafton_video_term';
	}
	@$tid = $term_array[ array_rand( $term_array ) ]['tid'];
	$query = new EntityFieldQuery();
	$query->entityCondition( 'entity_type','node' );
	$query->entityCondition( 'bundle',$bundle );
	$query->propertyCondition( 'status', 1 );
	$query->propertyOrderBy( 'created', 'DESC' );
	$query->range(0,3);
	$query->fieldCondition( $field_condition,'tid',$tid );
	$result = $query->execute();
	if ( !empty( $result ) )	{
		foreach ( $result['node'] as $key => $value )	{
			$node = node_load( $key );
			$content .= '<li>' . l( t( $node->title ),'node/' . $node->nid ) . '<br /><span class="related-posts-date">' . format_date( $node->created,'custom','F j, Y' ) . '</span></li>';
		}
	}
	$content .= '</ul>';
	return $output . $content;
}

/**
*	Helper Functions.
*/

function get_date_setting()	{

//Gets the date settings from the module settings page.
	
	$date_setting = variable_get( 'brafton_import_date' );
	switch( $date_setting )	{
		case 'published':
			$date = 'getPublishDate';
			break;
		case 'created':
			$date = 'getCreatedDate';
			break;
		case 'lastmodified':
			$date = 'getLastModifiedDate';
			break;
		default:
			$date = 'getPublishDate';
	}
	return $date;

}

function get_image_attributes( $articleobj,$feedtype = NULL,$photoClient = NULL,$photos = NULL,$id = NULL )	{
		
	if( $feedtype == 'video' )	{
		$thisPhotos = $photos->ListForArticle( $id,0,100 );
		$photoId = $photos->Get( $thisPhotos->items[0]->id )->sourcePhotoId;
		$image_info = array(
			'url' => $photoClient->Photos()->GetLocationUrl( $photoId )->locationUri,
			'alt' => $photos->Get( $thisPhotos->items[0]->id )->fields['caption'],
			'title' => $photos->Get( $thisPhotos->items[0]->id )->fields['caption'],
		);
		return $image_info;
	}
	else {

		//Grabs the image attributes from the feed.
		
		$images = $articleobj->getPhotos();
		if( !empty( $images ) )	{
			$image_array = $images[0];
			if( $image_array )	{
				$image_large = $image_array->getLarge();
				$image_info = array(
					'url' => $image_large->getUrl(),
					'alt' => $image_array->getAlt(),
					'title' => $image_array->getCaption(),
				);
				return $image_info;
			}
			else {
				$image_info = NULL;
				return $image_info;
			}
		}
	}

}

function get_category( $categories, $i ){
	$name = $categories[$i]->getName();
	return $name;
}

function set_article_categories( $articleobj,$bundle,$categoryObj = NULL )	{

	//Grabs the categories from the feed.

	if( $bundle == 'b_video' )	{
		$categories = array( $categoryObj );
		$vocab = 'b_news_v';
	}
	else {
		$categories = $articleobj->getCategories();
		$vocab = 'b_news_t';
	}

	//Checks to see if the terms already exist in the Brafton Taxonomy Vocabulary.  If they do not, new terms are created.
	$i = 0; 
	$brafton_vocabulary = taxonomy_vocabulary_machine_name_load( $vocab );
	$vid = $brafton_vocabulary->vid;
	$cat_array = array();
	foreach($categories as $category)	{
		if( $bundle == 'b_video' )	{
			$name = $categories[0]->name;
		}
		else {
			$name = get_category( $categories, $i );
			$i = $i + 1; 
		}
		$check_cat = taxonomy_get_term_by_name( $name );
		$found = 0;
		foreach( $check_cat as $term )	{
			if( $term->vid == $vid )	{
				$tid = $term->tid;
				$found = 1;
			}
		}
		if($found == 0)	{
			$new_term = array(
				'vid' => $vid,
				'name' => $name,
			);
			$new_term = ( object ) $new_term;
			taxonomy_term_save( $new_term );
			$tid = $new_term->tid;
		}
		array_push( $cat_array,$tid );
	}
	
	//Returns an array of valid term ids for the given article.
	
	return $cat_array;

}

function check_if_article_exists( $id,$bundle )	{

	//Queries nodes of type b_news for a Brafton ID, and returns an array of the results, or an empty array, if there are none.
	
	$query = new EntityFieldQuery();
	$query->entityCondition( 'entity_type','node' );
	$query->entityCondition( 'bundle',$bundle );
	$query->propertyCondition('status', 1);
	$query->fieldCondition( 'field_brafton_id','value',$id,'=' );
	$result = $query->execute();
	return $result;

}

function load_article_array( $is_archive )	{

	//Checks for an archive file, and if it finds one, loads the contents of the archive file into the API.  Otherwise, loads the live feed.  All articles are parsed from the XML into an array.
	
	if( $is_archive )	{
		$archive_file = file_load( variable_get( 'brafton_archive_file' ) );
		$tmp_name = drupal_realpath( $archive_file->uri );
		$article_array = NewsItem::getNewsList( $tmp_name,'html' );
		variable_del( 'brafton_archive_file' );
	}
	else	{
		$api_root = variable_get( 'brafton_api_root' );
		$api_key = variable_get( 'brafton_api_key' );
		$summon_api = new ApiHandler( $api_key,$api_root );
		$article_array = $summon_api->getNewsHTML();
	}
	return $article_array;

}

/**
*	Implementation of hook_cron, which runs the importer and saves the articles into the Drupal database as node type b_news.
*/

function brafton_cron()	{

	//Gathers feed type, Api and Video Keys, and archive file information from the Brafton module settings page.

	$feed_type = variable_get( 'brafton_feed_type' );
	$is_api = variable_get( 'brafton_api_key' );
	$is_video_public = variable_get( 'brafton_video_public_key' );
	$is_video_secret = variable_get( 'brafton_video_secret_key' );
	$is_archive = variable_get( 'brafton_archive_file' );
	$overwrite = variable_get( 'brafton_overwrite' );
	$is_published = variable_get( 'brafton_published' );
	
	if( $feed_type == 'articles' || $feed_type == 'both' )	{
		if( $is_api || $is_archive )	{

			//Loads the date and overwrite settings.
	
			$date = get_date_setting();
	
			//Loads the article objects from the feed into an array.
	
			$article_array = load_article_array( $is_archive );

			//Loops through the article array 

			foreach( $article_array as $value )	{

				//Checks to see if the article already exists.  If it does not, a new node is created of type b_news.  If it does, then depending upon the overwrite settings the existing node is either loaded, or we iterate to the next article in the feed
	
				$id = $value->getId();
				$check = check_if_article_exists( $id,'b_news' );
				if( !empty( $check ) && $overwrite == 1 )	{
					$nid = key($check['node']);
					$node = node_load( $nid );
				}
				elseif( empty( $check ) )	{
					$node = new stdClass();
				}
				else	{
					continue;
				}
		
				//Gets an array of image information from the feed.
		
				$image = get_image_attributes( $value );
		
				//Gets the article categories as an array of valid and unique term ids.
		
				$categories = set_article_categories( $value,'b_news' );
		
				//Instantiation of each article component as a field in the node object.
					if ($is_published==1){
				$node->status = 0;

				}
				else {
				$node->status = 1;
					}

				$node->type = 'b_news';
				$node->language = LANGUAGE_NONE;
				$node->title = $value->getHeadline();
				$node->uid = variable_get( 'brafton_author' );
				//$node->status = 1;
				$node->created = strtotime( $value->$date() );
				$node->promote = 0;
				$node->sticky = 0;
				$node->comment = variable_get( 'brafton_comments' );
				$node->body[ $node->language ][0] = array(
					'value' => $value->getText(),
					'summary' => $value->getExtract(),
					'format' => 'full_html',
				);
				if ( $image ) {
					$node->field_brafton_image[ $node->language ][0] = ( array ) system_retrieve_file( $image['url'],NULL,TRUE,FILE_EXISTS_REPLACE );
					$node->field_brafton_image[ $node->language ][0]['alt'] = $image['alt'];
					$node->field_brafton_image[ $node->language ][0]['title'] = $image['title'];
				}
				$node->field_brafton_id[ $node->language ][0]['value'] = $id;
				
				//ensure categories don't get added twice
				
				$cats=false;
				$oldcats;
				if($overwrite && isset($node->field_brafton_term[$node->language])){
					$oldcats = $node->field_brafton_term[$node->language];
					$cats=true;
				}
				
				foreach( $categories as $category )	{
					if($cats){
						foreach( $oldcats as $oldcat )	{
							if($oldcat['tid']!=$category){
								$node->field_brafton_term[ $node->language ][]['tid'] = $category;
							}
						}
					} else $node->field_brafton_term[ $node->language ][]['tid'] = $category;
				}
				
				//end category code
				
				node_save( $node );
				taxonomy_node_insert( $node );
				$nid=$node->nid;
				$alias = drupal_get_path_alias("node/" . $nid);
			}
		}
	}
	if( $feed_type == 'videos' || $feed_type == 'both' )	{
		if( $is_video_public && $is_video_secret )	{
			$baseURL = 'http://livevideo.api.brafton.com/v2/';
			$photoURI = "http://pictures.brafton.com/v2/";
			$videoClient = new AdferoVideoClient( $baseURL,$is_video_public,$is_video_secret );
			$videoOutClient = $videoClient->videoOutputs();
			$client = new AdferoClient( $baseURL,$is_video_public,$is_video_secret );
			$photoClient = new AdferoPhotoClient( $photoURI );
			$photos = $client->ArticlePhotos();
			$feeds = $client->Feeds();
			$feedList = $feeds->ListFeeds( 0,10 );
			$feedNum = variable_get( 'brafton_video_feednum' );
			$articles = $client->Articles();
			$articleList = $articles->ListForFeed( $feedList->items[ $feedNum ]->id,'live',0,100 );
			$sitemap=array();
			foreach( $articleList->items as $value )	{
				$id = $value->id;
				$categories = $client->Categories(); 
				$check = check_if_article_exists( $id,'b_video' );
				if( !empty( $check ) && $overwrite == 1 )	{
					$nid = key($check['node']);
					$node = node_load( $nid );
				}
				elseif( empty( $check ) )	{
					$node = new stdClass();
				}
				else	{
					continue;
				}
				$thisArticle = $client->Articles()->Get( $id );
				if( $categories->ListForFeed( $feedList->items[ $feedNum ]->id,0,100 )->items )	{
					$categoryId = $categories->ListForArticle( $id,0,100 )->items[0]->id;
					$category = $categories->Get( $categoryId );
					$categories = set_article_categories( $value,'b_video',$category );
				}

				$presplash = $thisArticle->fields['preSplash'];
				$postsplash = $thisArticle->fields['postSplash'];
				
				$videoList=$videoOutClient->ListForArticle($id,0,10);
				$list=$videoList->items;
				$ogg=false;
				$mp4=false;
				$flv=false;
				foreach($list as $listItem){
					$output=$videoOutClient->Get($listItem->id);
					//logMsg($output->path);
					if($output->type=="htmlmp4" && !$mp4) {$mp4=$output->path; $width=$output->width; $height=$output->height;}
					if($output->type=="htmlogg" && !$ogg) {$ogg=$output->path; $width=$output->width; $height=$output->height;}
					if($output->type=="flash" && !$flv) {$flv=$output->path; $width=$output->width; $height=$output->height;}
				}
				
				$embedCode="<video id='video-$id' class='video-js vjs-default-skin' controls preload='auto' width='$width' height='$height' poster='$presplash' data-setup=''> <source src='$mp4' type='video/mp4' /> <source src='$ogg' type='video/ogg' /><source src='$flv' type='video/flash' /></video>";
				
				//$embedCode = $videoClient->VideoPlayers()->GetWithFallback( $id,'redbean',1,'rcflashplayer',1 );
				//if ( strpos( $embedCode->embedCode,'adobe' ) < 30 )	{
				//	continue;
				//}

				//Wraps a Div around the embed code

				$embed_code = "<div id='post-single-video'>" . $embedCode . "</div>";

				//Gets the image data from the feed

				$image = get_image_attributes( NULL,'video',$photoClient,$photos,$id );

				//Creates the video node and inserts the values from the feed

				$node->type = 'b_video';
				$node->language = LANGUAGE_NONE;
				$node->title = $thisArticle->fields['title'];
				$node->uid = variable_get( 'brafton_author' );
				$node->status = 1;
				$node->created = strtotime( $thisArticle->fields['lastModifiedDate'] );
				$node->promote = 0;
				$node->sticky = 0;
				$node->comment = variable_get( 'brafton_comments' );
				$node->body[ $node->language ][0] = array(
					'value' => $thisArticle->fields['content'],
					'summary' => $thisArticle->fields['extract'],
					'format' => 'full_html',
				);
				$node->field_brafton_video[ $node->language ][0] = array(
					'value' => $embed_code,
					'format' => 'full_html',
				);
				if ( $image ) {
					$node->field_brafton_image[ $node->language ][0] = ( array ) system_retrieve_file( $image['url'],NULL,TRUE,FILE_EXISTS_REPLACE );
					$node->field_brafton_image[ $node->language ][0]['alt'] = $image['alt'];
					$node->field_brafton_image[ $node->language ][0]['title'] = $image['title'];
				}
				$node->field_brafton_id[ $node->language ][0]['value'] = $id;
				if( $categories )	{
					foreach( $categories as $category )	{
						$node->field_brafton_video_term[ $node->language ][]['tid'] = $category;
					}
				}
				node_save( $node );
				taxonomy_node_insert( $node );
				$nid=$node->nid;
				$alias = drupal_get_path_alias("node/" . $nid);
				$sitemap_url = $GLOBALS['base_url'].'/'.$alias;
				
				$sitemapaddition = array(
					"url" => $sitemap_url,
					"location" => $mp4,
					"title" => $node->title,
					"thumbnail" => $presplash,
					"description" =>$thisArticle->fields['content'],
					"publication" =>$thisArticle->fields['lastModifiedDate'],
				);
				
				$sitemap[]=$sitemapaddition;
			}

		}
		brafton_add_URLs($sitemap);
	}

}

function brafton_add_URLs($sitemaps){
//function to build video sitemap according to google specifications
//accepts array of arrays.
//second array keys:url, (url of page video is on)
//title,
//thumbnail, (img location for thumbnail)
//description, (video description)
//content_loc (actual location of video file)
//
//more can be added relatively easily
//
	$funkdoc = new DOMDocument();
	//like funcdoc, but redman
	if(!file_exists('video-sitemap.xml')){
		$newurlset = $funkdoc ->createElementNS('http://www.sitemaps.org/schemas/sitemap/0.9','urlset','');
		$funkdoc -> appendChild($newurlset);
		$newurlset->setAttributeNS('http://www.w3.org/2000/xmlns/' ,'xmlns:video', 'http://www.google.com/schemas/sitemap-video/1.1');
		$funkdoc->save("video-sitemap.xml");
	} else $funkdoc->load('video-sitemap.xml');			
		
		if($funkdoc){
			//get previous titles to prevent sitemap entry duplication
			$titles=array();
			$videos = $funkdoc->getElementsByTagName('url');
			foreach ($videos as $video) {
				foreach($video->childNodes as $child){
					 if($child->nodeName=="video:video"){
						foreach($child->childNodes as $children){
							if($children->nodeName=="video:title"){
								$titles[]=$children->nodeValue;
							}
						}
					}
				}
			}
			
			$urlset = $funkdoc->getElementsByTagName('urlset');
			foreach ($urlset as $urltag) {
			//should only be one
				foreach($sitemaps as $video){
				//do all sitemap additions at once for only one file write.
					
					//dupe check
					$dupe=false;
					foreach($titles as $video_title){
						if($video_title==$video['title'])
						$dupe=true;
					}
					if($dupe) continue;
					
					//url
					$newurl = $funkdoc ->createElement('url');
					//$txtNode = $funkdoc ->createTextNode ("test");
					//$newurl -> appendChild($txtNode);
					$linebreak = $funkdoc ->createTextNode ("\n");
					$newurl -> appendChild($linebreak);
					
					//loc tag
					$newloc = $funkdoc ->createElement('loc');
					$txtNode = $funkdoc ->createTextNode ($video['url']);
					$newloc -> appendChild($txtNode);
					$newurl -> appendChild($newloc);
					
					$linebreak = $funkdoc ->createTextNode ("\n");
					$newurl -> appendChild($linebreak);
					
					//video tag
					$newvideo = $funkdoc ->createElement('video:video');
					$newurl -> appendChild($newvideo);
					
					//title tag
					$newtitle = $funkdoc ->createElement('video:title');
					$txtNode = $funkdoc ->createTextNode ($video['title']);
					$newtitle -> appendChild($txtNode);
					$newvideo -> appendChild($newtitle);
					
					$linebreak = $funkdoc ->createTextNode ("\n");
					$newvideo -> appendChild($linebreak);
					
					//thumbnail tag
					$newthumb = $funkdoc ->createElement('video:thumbnail_loc');
					$txtNode = $funkdoc ->createTextNode ($video['thumbnail']);
					$newthumb -> appendChild($txtNode);
					$newvideo -> appendChild($newthumb);
					
					$linebreak = $funkdoc ->createTextNode ("\n");
					$newvideo -> appendChild($linebreak);
					
					
					//description tag
					$newdesc = $funkdoc ->createElement('video:description');
					$txtNode = $funkdoc ->createTextNode ($video['description']);
					$newdesc -> appendChild($txtNode);
					$newvideo -> appendChild($newdesc);
					
					$linebreak = $funkdoc ->createTextNode ("\n");
					$newvideo -> appendChild($linebreak);
					

					//content location tag
					$newcontentloc = $funkdoc ->createElement('video:content_loc');
					$txtNode = $funkdoc ->createTextNode ($video['location']);
					$newcontentloc -> appendChild($txtNode);
					$newvideo -> appendChild($newcontentloc);
					
					$linebreak = $funkdoc ->createTextNode ("\n");
					$newvideo -> appendChild($linebreak);
					
					//publication date tag
					$newpubdate = $funkdoc ->createElement('video:publication_date');
					$txtNode = $funkdoc ->createTextNode ($video['publication']);
					$newpubdate -> appendChild($txtNode);
					$newvideo -> appendChild($newpubdate);

					$linebreak = $funkdoc ->createTextNode ("\n");
					$newvideo -> appendChild($linebreak);
					
					$linebreak = $funkdoc ->createTextNode ("\n");
					$newurl -> appendChild($linebreak);
					
					$linebreak = $funkdoc ->createTextNode ("\n");
					$urltag -> appendChild($newurl);
					
					$linebreak = $funkdoc ->createTextNode ("\n");
					$urltag -> appendChild($linebreak);
			}	
				$test = $funkdoc->save("video-sitemap.xml");
		}
	}
}

?>
